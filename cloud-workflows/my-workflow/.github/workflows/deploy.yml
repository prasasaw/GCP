name: 'deploy my workflow'

on:
  push:
    branches:
    - main
    - dev

  pull_request:

jobs:
#  run-linters:
#    name: Linting
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Check out Git repository
#        uses: actions/checkout@v2
#        with:
#          github_token: ${{ secrets.github_token }}
#
#      - name: Set up Node.js
#        uses: actions/setup-node@v1
#        with:
#          node-version: 12
#
#      # ESLint and Prettier must be in `package.json`
#      - name: Install Node.js dependencies
#        run: npm install
#
#      - name: Run linters
#        uses: wearerequired/lint-action@v1
#        with:
#          github_token: ${{ secrets.github_token }}
#          eslint: true
#          auto_fix: true

#  Vulnerability_Scan:
#    name: Security Scan
#    runs-on: ubuntu-latest
##    needs: run-linters
#    steps:
#      - uses: actions/checkout@v2
#      - name: install dependencies
#        run: npm install
#      - name: audit scanning
#        run: npm audit --json
#      - uses: oke-py/npm-audit-action@v1.8.4
#        with:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          issue_assignees: oke-py
#          issue_labels: vulnerability
#          dedupe_issues: true
  Test:
    name: Unit Testing
    runs-on: ubuntu-latest
#    needs: Vulnerability_Scan
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v2
        with:
          github_token: ${{ secrets.github_token }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10.2"

      - name: Install python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Unit Test
        run: python -m pytest

  Cloud_Run_deploy:
    name: Cloud Run Deploy
    runs-on: ubuntu-latest
    needs: Test
    steps:
      - name: Login to prod
        if: endsWith(github.ref, '/main')
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}

      - name: Login to dev
        if: endsWith(github.ref, '/dev')
        uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID_DEV }}
          service_account_email: ${{ secrets.GCP_SA_EMAIL_DEV }}
          service_account_key: ${{ secrets.GCP_SA_KEY_DEV }}

      - name: Check out Git repository
        uses: actions/checkout@v2
#      - name: Install python dependencies
#        run: pip install

      - name: Configure Docker in prod
        if: endsWith(github.ref, '/main')
        run: gcloud auth configure-docker --quiet

      - name: Configure Docker in dev
        if: endsWith(github.ref, '/dev')
        run: gcloud auth configure-docker --quiet

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Build Docker image in prod
        if: endsWith(github.ref, '/main')
        run: docker build . --tag gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}

      - name: Build Docker image in dev
        if: endsWith(github.ref, '/dev')
        run: docker build . --tag gcr.io/${{ secrets.GCP_PROJECT_ID_DEV }}/${{ secrets.GCP_APP_NAME }}

      - name: Push Docker image in prod
        if: endsWith(github.ref, '/main')
        run: docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }}

      - name: Push Docker image in dev
        if: endsWith(github.ref, '/dev')
        run: docker push gcr.io/${{ secrets.GCP_PROJECT_ID_DEV }}/${{ secrets.GCP_APP_NAME }}

      - name: Deploy Docker image in prod
        if: endsWith(github.ref, '/main')
        run: gcloud run deploy ${{ secrets.GCP_APP_NAME }} --image gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_APP_NAME }} --region europe-west1  --platform managed --allow-unauthenticated

      - name: Deploy Docker image in dev
        if: endsWith(github.ref, '/dev')
        run: gcloud run deploy ${{ secrets.GCP_APP_NAME }} --image gcr.io/${{ secrets.GCP_PROJECT_ID_DEV }}/${{ secrets.GCP_APP_NAME }} --region europe-west1  --platform managed --allow-unauthenticated

